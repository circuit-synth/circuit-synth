{
  "description": "Circuit-Synth Library Development Environment",
  "version": "2.0.0",
  "model": "claude-sonnet-4-20250514[1m]",
  
  "env": {
    "PYTHONPATH": "${PYTHONPATH}:./src",
    "CIRCUIT_SYNTH_DEV": "1"
  },
  
  "hooks": {
    "PostToolUse": [
      {
        "description": "Format and lint Python files after editing",
        "matcher": "Edit|Write|MultiEdit.*\\.py$",
        "hooks": [
          {
            "type": "command",
            "command": "FILE_PATH=$(echo '$CLAUDE_TOOL_INPUT' | jq -r '.file_path // .edits[0].file_path // empty'); if [[ \"$FILE_PATH\" == *.py ]]; then echo 'üîß Formatting...'; black \"$FILE_PATH\" 2>/dev/null; isort \"$FILE_PATH\" 2>/dev/null; echo 'üìù Linting...'; flake8 \"$FILE_PATH\" --max-line-length=100 2>/dev/null || echo '‚ö†Ô∏è  Linting issues found'; fi"
          }
        ]
      },
      {
        "description": "Run tests for modified test files",
        "matcher": "Edit|Write.*test.*\\.py$",
        "hooks": [
          {
            "type": "command",
            "command": "FILE_PATH=$(echo '$CLAUDE_TOOL_INPUT' | jq -r '.file_path // empty'); if [[ \"$FILE_PATH\" =~ test.*\\.py$ ]]; then echo 'üß™ Running tests...'; uv run pytest \"$FILE_PATH\" -v --tb=short || echo '‚ùå Tests failed'; fi"
          }
        ]
      },
      {
        "description": "Type check Python files",
        "matcher": "Edit|Write.*\\.py$",
        "hooks": [
          {
            "type": "command",
            "command": "FILE_PATH=$(echo '$CLAUDE_TOOL_INPUT' | jq -r '.file_path // empty'); if [[ \"$FILE_PATH\" == *.py ]] && [[ ! \"$FILE_PATH\" =~ test ]]; then mypy \"$FILE_PATH\" 2>/dev/null || echo 'üîç Type issues detected'; fi"
          }
        ]
      },
      {
        "description": "Check for TODO items after changes",
        "matcher": "Edit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "FILE_PATH=$(echo '$CLAUDE_TOOL_INPUT' | jq -r '.file_path // empty'); if grep -q 'TODO\\|FIXME\\|XXX' \"$FILE_PATH\" 2>/dev/null; then echo 'üìù TODOs found in file:'; grep -n 'TODO\\|FIXME\\|XXX' \"$FILE_PATH\"; fi"
          }
        ]
      }
    ],
    
    "PreCommit": [
      {
        "description": "Run quality checks before committing",
        "matcher": ".*",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'üîç Running pre-commit checks...'; black src/ tests/ --check 2>/dev/null || echo '‚ö†Ô∏è  Formatting needed'; flake8 src/ tests/ 2>/dev/null || echo '‚ö†Ô∏è  Linting issues'; uv run pytest tests/unit/ --tb=short -q || echo '‚ùå Tests failing'"
          }
        ]
      }
    ]
  },
  
  "qualityGates": {
    "minTestCoverage": 80,
    "maxCyclomaticComplexity": 10,
    "maxFunctionLength": 30,
    "requireTypeHints": true,
    "requireDocstrings": true
  }
}